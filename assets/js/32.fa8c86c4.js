(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{231:function(t,v,_){"use strict";_.r(v);var e=_(0),s=Object(e.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"let-const"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#let-const"}},[t._v("#")]),t._v(" Let Const")]),t._v(" "),_("p",[t._v("Let 和 const 声明会形成块级作用域。")]),t._v(" "),_("h2",{attrs:{id:"var-缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#var-缺陷"}},[t._v("#")]),t._v(" "),_("code",[t._v("var")]),t._v(' "缺陷"')]),t._v(" "),_("ol",[_("li",[t._v("可以重复声明同名变量（闭包缓存）")]),t._v(" "),_("li",[t._v("无法限制修改")]),t._v(" "),_("li",[t._v("没有块级作用域（"),_("code",[t._v("{}")]),t._v("，"),_("code",[t._v("if () {}")]),t._v(", "),_("code",[t._v("for () {}")]),t._v("），作用域只在函数中有效"),_("code",[t._v("Function")]),t._v("。")]),t._v(" "),_("li",[t._v("变量提升")]),t._v(" "),_("li",[t._v("声明的变量会挂载在 window 上")])]),t._v(" "),_("h2",{attrs:{id:"let"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" Let")]),t._v(" "),_("p",[t._v("Let 暂存死区")]),t._v(" "),_("p",[_("code",[t._v("Let")]),t._v(" 栈内存")]),t._v(" "),_("h2",{attrs:{id:"const"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" Const")]),t._v(" "),_("p",[t._v("Const 一旦声明必须赋值，不能用 null 占位，声明后不能再修改，如果 声明的是复合类型数据，可以修改属性")]),t._v(" "),_("p",[_("code",[t._v("Const")]),t._v(" 声明复合类型的数据（{}、[]）,变量指向内存地址。"),_("code",[t._v("Const")]),t._v(" 栈内存储存的是堆内存的地址，堆内存储存了实际的数据")])])},[],!1,null,null,null);v.default=s.exports}}]);